// Service de chatbot intelligent simulant une API IA
class ChatbotService {
  constructor() {
    this.conversationHistory = [];
    this.userContext = null;
  }

  // Initialiser le contexte utilisateur
  setUserContext(user) {
    this.userContext = user;
  }

  // Simuler une API d'IA pour g√©n√©rer des r√©ponses intelligentes
  async generateResponse(userMessage, conversationHistory = []) {
    // Simuler un d√©lai d'API r√©aliste
    await this.delay(1000 + Math.random() * 2000);

    const context = this.buildContext(userMessage, conversationHistory);
    const response = await this.processWithAI(userMessage, context);
    
    return {
      content: response,
      suggestions: this.generateSuggestions(userMessage, response),
      quickReplies: this.generateQuickReplies(userMessage)
    };
  }

  // Construire le contexte de conversation
  buildContext(currentMessage, history) {
    const recentMessages = history.slice(-5); // Garder les 5 derniers messages
    const userInfo = this.userContext || { name: 'Utilisateur', role: '√©tudiant' };
    
    return {
      user: userInfo,
      recentConversation: recentMessages,
      currentMessage: currentMessage,
      timestamp: new Date().toISOString()
    };
  }

  // Simuler le traitement IA (remplace l'appel √† une vraie API)
  async processWithAI(message, context) {
    const lowerMessage = message.toLowerCase();
    const userName = context.user.name || 'Ahmed';

    // R√©ponses contextuelles intelligentes bas√©es sur l'analyse du message
    const responses = await this.getIntelligentResponse(lowerMessage, userName, context);
    
    return responses;
  }

  // G√©n√©rer des r√©ponses intelligentes bas√©es sur l'analyse du message
  async getIntelligentResponse(message, userName, context) {
    // Analyse des intentions et entit√©s
    const intent = this.analyzeIntent(message);
    const entities = this.extractEntities(message);
    
    switch (intent) {
      case 'greeting':
        return this.generateGreetingResponse(userName);
      
      case 'course_question':
        return this.generateCourseResponse(entities, userName);
      
      case 'technical_help':
        return this.generateTechnicalResponse(entities, userName);
      
      case 'progress_inquiry':
        return this.generateProgressResponse(userName);
      
      case 'quiz_help':
        return this.generateQuizResponse(entities, userName);
      
      case 'schedule_question':
        return this.generateScheduleResponse(userName);
      
      case 'general_question':
        return this.generateGeneralResponse(message, userName, context);
      
      default:
        return this.generateContextualResponse(message, userName, context);
    }
  }

  // Analyser l'intention du message
  analyzeIntent(message) {
    const greetings = ['bonjour', 'salut', 'hello', 'bonsoir', 'hey'];
    const courseKeywords = ['cours', 'le√ßon', 'module', 'formation', 'apprentissage'];
    const techKeywords = ['probl√®me', 'erreur', 'bug', 'connexion', 'technique'];
    const progressKeywords = ['progression', 'avancement', 'r√©sultat', 'note', 'score'];
    const quizKeywords = ['quiz', 'examen', 'test', '√©valuation', 'devoir'];
    const scheduleKeywords = ['planning', 'horaire', 'rendez-vous', 'meeting', 'session'];

    if (greetings.some(word => message.includes(word))) return 'greeting';
    if (courseKeywords.some(word => message.includes(word))) return 'course_question';
    if (techKeywords.some(word => message.includes(word))) return 'technical_help';
    if (progressKeywords.some(word => message.includes(word))) return 'progress_inquiry';
    if (quizKeywords.some(word => message.includes(word))) return 'quiz_help';
    if (scheduleKeywords.some(word => message.includes(word))) return 'schedule_question';
    if (message.includes('?')) return 'general_question';
    
    return 'contextual';
  }

  // Extraire les entit√©s du message
  extractEntities(message) {
    const entities = {
      subjects: [],
      difficulty: null,
      timeframe: null
    };

    // Sujets d√©tect√©s
    const subjects = ['math√©matiques', 'fran√ßais', 'sciences', 'histoire', 'g√©ographie', 'physique', 'chimie'];
    entities.subjects = subjects.filter(subject => message.includes(subject));

    // Niveau de difficult√©
    if (message.includes('difficile') || message.includes('compliqu√©')) entities.difficulty = 'hard';
    if (message.includes('facile') || message.includes('simple')) entities.difficulty = 'easy';

    // Temporalit√©
    if (message.includes('aujourd\'hui') || message.includes('maintenant')) entities.timeframe = 'today';
    if (message.includes('demain')) entities.timeframe = 'tomorrow';

    return entities;
  }

  // G√©n√©rer diff√©rents types de r√©ponses
  generateGreetingResponse(userName) {
    const greetings = [
      `Bonjour ${userName} ! üëã Je suis ravi de vous revoir. Comment puis-je vous aider aujourd'hui ?`,
      `Salut ${userName} ! üòä Pr√™t pour une nouvelle session d'apprentissage ? Que souhaitez-vous explorer ?`,
      `Hello ${userName} ! ‚ú® J'esp√®re que vous passez une excellente journ√©e. Sur quoi travaillons-nous aujourd'hui ?`
    ];
    return greetings[Math.floor(Math.random() * greetings.length)];
  }

  generateCourseResponse(entities, userName) {
    const subject = entities.subjects[0] || 'votre mati√®re';
    return `Excellente question sur ${subject}, ${userName} ! üìö 

Je peux vous aider avec :
‚Ä¢ **Concepts fondamentaux** et explications d√©taill√©es
‚Ä¢ **Exercices pratiques** adapt√©s √† votre niveau
‚Ä¢ **Ressources compl√©mentaires** pour approfondir
‚Ä¢ **M√©thodes d'apprentissage** efficaces

Quel aspect sp√©cifique vous int√©resse le plus ? Je peux adapter mes explications √† votre rythme d'apprentissage.`;
  }

  generateTechnicalResponse(entities, userName) {
    return `Je comprends votre probl√®me technique, ${userName}. üîß

Voici comment je peux vous aider :
‚Ä¢ **Diagnostic rapide** du probl√®me
‚Ä¢ **Solutions √©tape par √©tape**
‚Ä¢ **Alternatives** si la premi√®re solution ne fonctionne pas
‚Ä¢ **Pr√©vention** pour √©viter que cela se reproduise

Pouvez-vous me d√©crire plus pr√©cis√©ment ce qui ne fonctionne pas ? Plus vous me donnez de d√©tails, mieux je peux vous aider !`;
  }

  generateProgressResponse(userName) {
    return `Parlons de votre progression, ${userName} ! üìà

Je peux vous fournir des insights sur :
‚Ä¢ **Analyse de vos performances** r√©centes
‚Ä¢ **Points forts** √† maintenir
‚Ä¢ **Axes d'am√©lioration** identifi√©s
‚Ä¢ **Recommandations personnalis√©es** pour progresser
‚Ä¢ **Objectifs** √† court et long terme

Souhaitez-vous qu'on examine une mati√®re en particulier ou faire un bilan global ?`;
  }

  generateQuizResponse(entities, userName) {
    const subject = entities.subjects[0] || 'la mati√®re de votre choix';
    return `Parfait pour les quiz, ${userName} ! üéØ

Je peux vous proposer :
‚Ä¢ **Quiz personnalis√©s** en ${subject}
‚Ä¢ **Questions adapt√©es** √† votre niveau
‚Ä¢ **Explications d√©taill√©es** des r√©ponses
‚Ä¢ **Conseils strat√©giques** pour les examens
‚Ä¢ **R√©visions cibl√©es** sur vos points faibles

Quel type de quiz vous int√©resse ? Questions rapides ou session d'entra√Ænement approfondie ?`;
  }

  generateScheduleResponse(userName) {
    return `Organisons votre planning, ${userName} ! üìÖ

Je peux vous aider avec :
‚Ä¢ **Planification d'√©tude** optimis√©e
‚Ä¢ **Rappels personnalis√©s** pour vos sessions
‚Ä¢ **√âquilibrage** entre diff√©rentes mati√®res
‚Ä¢ **Gestion du temps** efficace
‚Ä¢ **Pr√©paration aux √©ch√©ances** importantes

Avez-vous des deadlines sp√©cifiques ou souhaitez-vous cr√©er un planning d'√©tude r√©gulier ?`;
  }

  generateGeneralResponse(message, userName, context) {
    return `C'est une excellente question, ${userName} ! ü§î

Bas√© sur notre conversation, je pense que vous vous int√©ressez √† l'apprentissage et au d√©veloppement de vos comp√©tences. 

Voici comment je peux vous accompagner :
‚Ä¢ **R√©ponses personnalis√©es** √† vos questions sp√©cifiques
‚Ä¢ **Explications adapt√©es** √† votre niveau
‚Ä¢ **Ressources recommand√©es** pour approfondir
‚Ä¢ **Suivi de votre progression** dans le temps

N'h√©sitez pas √† me poser des questions plus sp√©cifiques - plus vous √™tes pr√©cis, mieux je peux vous aider !`;
  }

  generateContextualResponse(message, userName, context) {
    // Analyser le contexte de la conversation pour une r√©ponse plus intelligente
    const recentTopics = this.extractTopicsFromHistory(context.recentConversation);
    
    return `Je vois que vous vous int√©ressez √† ${recentTopics.join(', ')}, ${userName}. 

Permettez-moi de vous donner une r√©ponse r√©fl√©chie √† votre message : "${message}"

Bas√© sur notre conversation et votre profil d'apprentissage, je recommande d'aborder cette question sous plusieurs angles. Souhaitez-vous que je vous propose une approche structur√©e ou pr√©f√©rez-vous commencer par un aspect particulier ?

üí° **Astuce** : Plus vous me donnez de contexte, plus mes r√©ponses peuvent √™tre pr√©cises et utiles !`;
  }

  // Extraire les sujets de l'historique de conversation
  extractTopicsFromHistory(history) {
    const topics = new Set();
    const keywords = ['math√©matiques', 'sciences', 'fran√ßais', 'quiz', 'cours', 'progression'];
    
    history.forEach(msg => {
      keywords.forEach(keyword => {
        if (msg.content && msg.content.toLowerCase().includes(keyword)) {
          topics.add(keyword);
        }
      });
    });
    
    return Array.from(topics).slice(0, 3); // Limiter √† 3 sujets principaux
  }

  // G√©n√©rer des suggestions intelligentes
  generateSuggestions(userMessage, response) {
    const suggestions = [];
    const message = userMessage.toLowerCase();

    if (message.includes('cours')) {
      suggestions.push(
        'Quels sont les pr√©requis pour ce cours ?',
        'Avez-vous des exercices pratiques ?',
        'Comment √©valuer ma compr√©hension ?'
      );
    } else if (message.includes('quiz')) {
      suggestions.push(
        'Cr√©er un quiz personnalis√©',
        'Voir mes r√©sultats pr√©c√©dents',
        'Conseils pour mieux r√©viser'
      );
    } else if (message.includes('aide')) {
      suggestions.push(
        'Guide de d√©marrage rapide',
        'Contacter le support technique',
        'Voir la documentation compl√®te'
      );
    } else {
      suggestions.push(
        'Expliquer plus en d√©tail',
        'Donner des exemples concrets',
        'Proposer des ressources suppl√©mentaires'
      );
    }

    return suggestions.slice(0, 3);
  }

  // G√©n√©rer des r√©ponses rapides contextuelles
  generateQuickReplies(userMessage) {
    const message = userMessage.toLowerCase();
    
    if (message.includes('cours') || message.includes('formation')) {
      return ['üìö Voir mes cours', 'üéØ Cours recommand√©s', 'üìà Ma progression'];
    } else if (message.includes('quiz') || message.includes('test')) {
      return ['üéØ Nouveau quiz', 'üìä Mes r√©sultats', 'üèÜ Mes badges'];
    } else if (message.includes('aide') || message.includes('help')) {
      return ['üìñ Guide d\'aide', 'üí¨ Contact support', 'üîç Rechercher'];
    } else {
      return ['üëç Merci', '‚ùì Plus d\'infos', '‚û°Ô∏è Continuer'];
    }
  }

  // Utilitaire pour simuler un d√©lai
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Analyser le sentiment du message (positif, n√©gatif, neutre)
  analyzeSentiment(message) {
    const positiveWords = ['merci', 'super', 'g√©nial', 'parfait', 'excellent'];
    const negativeWords = ['probl√®me', 'difficile', 'erreur', 'frustrant', 'compliqu√©'];
    
    const hasPositive = positiveWords.some(word => message.includes(word));
    const hasNegative = negativeWords.some(word => message.includes(word));
    
    if (hasPositive && !hasNegative) return 'positive';
    if (hasNegative && !hasPositive) return 'negative';
    return 'neutral';
  }

  // Obtenir des statistiques de conversation
  getConversationStats() {
    return {
      totalMessages: this.conversationHistory.length,
      averageResponseTime: '1.2s',
      satisfactionScore: '4.8/5',
      topicsDiscussed: this.extractTopicsFromHistory(this.conversationHistory)
    };
  }
}

// Instance singleton du service
const chatbotService = new ChatbotService();

export default chatbotService;